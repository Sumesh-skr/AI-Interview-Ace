// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates a performance report after an AI interview, including charts and graphs.
 *
 * - generatePerformanceReport - A function that generates the performance report.
 * - GeneratePerformanceReportInput - The input type for the generatePerformanceReport function.
 * - GeneratePerformanceReportOutput - The return type for the generatePerformanceReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePerformanceReportInputSchema = z.object({
  interviewType: z
    .string()
    .describe(
      'The type of interview, either HR or Technical. Technical interviews include the sub-section chosen by the student.'
    ),
  studentResponses: z
    .array(z.string())
    .describe('An array of the student responses during the interview.'),
  questions: z.array(z.string()).describe('An array of the questions asked during the interview.'),
  resumeKeywords: z
    .array(z.string())
    .describe('An array of keywords extracted from the student resume.'),
});
export type GeneratePerformanceReportInput = z.infer<typeof GeneratePerformanceReportInputSchema>;

const GeneratePerformanceReportOutputSchema = z.object({
  report: z.string().describe('A detailed report of the student performance.'),
});
export type GeneratePerformanceReportOutput = z.infer<typeof GeneratePerformanceReportOutputSchema>;

export async function generatePerformanceReport(
  input: GeneratePerformanceReportInput
): Promise<GeneratePerformanceReportOutput> {
  return generatePerformanceReportFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generatePerformanceReportPrompt',
  input: {schema: GeneratePerformanceReportInputSchema},
  output: {schema: GeneratePerformanceReportOutputSchema},
  prompt: `You are an AI interview performance analyst. You will generate a detailed report based on the student's responses, the questions asked, and the keywords from their resume.

  Interview Type: {{{interviewType}}}

  Student Responses:
  {{#each studentResponses}}
  - {{{this}}}
  {{/each}}

  Questions Asked:
  {{#each questions}}
  - {{{this}}}
  {{/each}}

  Resume Keywords:
  {{#each resumeKeywords}}
  - {{{this}}}
  {{/each}}

  Please provide a comprehensive report, including strengths, weaknesses, and areas for improvement.  The report should include charts and graphs where applicable. Focus on actionable insights.
`,
});

const generatePerformanceReportFlow = ai.defineFlow(
  {
    name: 'generatePerformanceReportFlow',
    inputSchema: GeneratePerformanceReportInputSchema,
    outputSchema: GeneratePerformanceReportOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
